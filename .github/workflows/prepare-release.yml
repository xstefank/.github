name: Xstefank Quarkiverse Prepare Release

on:
  workflow_call:
    inputs:
      maven_executable:
        required: false
        description: Maven Executable
        type: string
      java_version:
        required: false
        description: Java Version
        type: number
        default: 17
      create_release:
        required: false
        description: Create Release ?
        type: boolean
        default: true
    # Map the workflow outputs to job outputs
    outputs:
      release-version:
        description: "Released Version"
        value: ${{ jobs.prepare-release.outputs.release-version }}
      next-version:
        description: "Next Version"
        value: ${{ jobs.prepare-release.outputs.next-version }}

permissions:
  contents: write

jobs:
  prepare-release:
    runs-on: ubuntu-latest
    name: Prepare Release
    # Map the job outputs to step outputs
    outputs:
      release-version: ${{ steps.out.outputs.release-version }}
      next-version: ${{ steps.out.outputs.next-version }}

    steps:
#      - uses: actions/create-github-app-token@v1
#        id: app-token
#        name: Create GitHub App Token
#        with:
#          app-id: ${{ vars.CI_APP_ID }}
#          private-key: ${{ secrets.CI_APP_PRIVATE_KEY }}

      - uses: actions/checkout@v4
#        with:
#          token: ${{ steps.app-token.outputs.token }}

#      - name: Get GitHub App User ID
#        id: get-user-id
#        run: echo "user-id=$(gh api "/users/${{ steps.app-token.outputs.app-slug }}[bot]" --jq .id)" >> "$GITHUB_OUTPUT"
#        env:
#          GH_TOKEN: ${{ steps.app-token.outputs.token }}

      - name: Configure Git author
        run: |
          git config --global user.name 'xstefank'
          git config --global user.email 'xstefank122@gmail.com'

      - uses: radcortez/project-metadata-action@main
        name: Retrieve project metadata
        id: metadata
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          metadata-file-path: '.github/project.yml'
          local-file: true

      - name: Set environment variables
        run: |
          echo "CURRENT_VERSION=${{steps.metadata.outputs.current-version}}" >> $GITHUB_ENV
          echo "NEXT_VERSION=${{steps.metadata.outputs.next-version}}" >> $GITHUB_ENV

      - name: Set up JDK ${{inputs.java_version}}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{inputs.java_version}}
          cache: 'maven'

      - name: Setup JBang
        uses: jbangdev/setup-jbang@main

      - name: Detect Maven Executable
        run: |
          if [[ -z "${MAVEN_EXEC}" ]]; then
            if [ -f mvnw ]; then
              echo "MAVEN_EXEC=./mvnw" >> $GITHUB_ENV
            else
              echo "MAVEN_EXEC=mvn" >> $GITHUB_ENV
            fi
          else
            echo "MAVEN_EXEC=${MAVEN_EXEC}" >> $GITHUB_ENV
          fi
        env:
          MAVEN_EXEC: ${{ inputs.maven_executable }}

      - name: Invoke Pre-Prepare Release Hook (if exists)
        if: ${{ hashFiles('.github/workflows/hooks/pre-prepare-release.sh') != '' }}
        run: ./.github/workflows/hooks/pre-prepare-release.sh
        env:
          GH_TOKEN: ${{ steps.app-token.outputs.token }}
          CURRENT_VERSION: ${{env.CURRENT_VERSION}}
          NEXT_VERSION: ${{env.NEXT_VERSION}}

      - name: Update latest release version in docs
        if: ${{ hashFiles('docs/pom.xml') != '' }}
        run: |
          $MAVEN_EXEC -B -ntp -pl docs -am package -DskipTests -DskipITs -Denforcer.skip -Dformatter.skip -Dimpsort.skip
          if [[ `git status --porcelain` ]]; then
            git commit -a -m "Update the latest release version ${{env.CURRENT_VERSION}} in documentation"
          fi

#      - name: Maven release ${{env.CURRENT_VERSION}}
#        run: |
#          $MAVEN_EXEC -B release:prepare -Prelease -Dgpg.skip=true -DreleaseVersion=${CURRENT_VERSION} -DdevelopmentVersion=${NEXT_VERSION} -Darguments="-Dgpg.skip=true -DprepareRelease=true" -DprepareRelease=true
#          $MAVEN_EXEC -B release:clean
#
#      - name: Invoke Post-Prepare Release Hook (if exists)
#        if: ${{ hashFiles('.github/workflows/hooks/post-prepare-release.sh') != '' }}
#        run: ./.github/workflows/hooks/post-prepare-release.sh
#        env:
#          GH_TOKEN: ${{ steps.app-token.outputs.token }}
#          CURRENT_VERSION: ${{env.CURRENT_VERSION}}
#          NEXT_VERSION: ${{env.NEXT_VERSION}}
#
#      - name: Push changes to ${{github.base_ref}} branch and tag ${{env.CURRENT_VERSION}}
#        run: |
#          git push
#          git push origin ${CURRENT_VERSION}
#
#      - name: Output release version
#        id: out
#        run: |
#          echo "release-version=${CURRENT_VERSION}" >> $GITHUB_OUTPUT
#          echo "next-version=${NEXT_VERSION}" >> $GITHUB_OUTPUT
#
#      - name: Create GitHub Release
#        if: ${{ inputs.create_release }}
#        run: gh release create ${CURRENT_VERSION} --generate-notes --latest=${LATEST_RELEASE} --prerelease=${PRE_RELEASE}
#        env:
#          GH_TOKEN: ${{ steps.app-token.outputs.token }}
#          PRE_RELEASE: ${{ steps.metadata.outputs.pre-release == 'true' }}
#          LATEST_RELEASE: ${{ !steps.metadata.outputs.latest || (steps.metadata.outputs.latest == 'true') }}
